#!/usr/bin/env python3

from argparse import ArgumentParser, FileType, HelpFormatter
from base64 import b64decode
from io import BufferedWriter
from pathlib import Path
from sys import stderr, stdin, stdout


class NewlineHelpFormatter(HelpFormatter):
    """
    A formatter that keeps line breaks in argument help text
    """

    def _split_lines(self, text: str, width: int) -> list[str]:
        import textwrap

        return [l for lines in (textwrap.wrap(line, width) for line in text.splitlines()) for l in lines]


def warn(*args: object, **kwargs: object) -> None:
    print(*args, **kwargs, file=stderr)


def decode_b64(data_b64: str) -> bytes:
    return b64decode(data_b64 + "==")  # Fix possible missing padding


def main() -> None:
    parser = ArgumentParser(description="Decode base-64 input from a file or STDIN.", formatter_class=NewlineHelpFormatter)
    parser.add_argument(
        "file_in",
        nargs="?",
        default="-",
        help="Input base-64 file, defaults to STDIN if - or unspecified.\n"
        "If filename is invalid or points to a non-existing file, it is interpreted as base-64 data.",
    )
    parser.add_argument(
        "file_out",
        nargs="?",
        type=FileType(mode="wb"),
        default=stdout.buffer,
        help="Output file, defaults to STDOUT if - or unspecified.",
    )
    parser.add_argument("-s", "--silent", action="store_true", help="Don't output status information")
    args = parser.parse_args()

    filename_in: str = args.file_in
    file_out: BufferedWriter = args.file_out
    is_silent: bool = args.silent

    if filename_in == "-":
        data_b64 = stdin.read()
    else:
        file_in = Path(filename_in)
        try:
            file_exists = file_in.exists()
        except OSError:
            file_exists = False

        if file_exists:
            data_b64 = file_in.read_text()
        else:
            data_b64 = filename_in
            if not is_silent:
                warn("Note: interpreting first arg as base 64 data since it isn't an existing file name")

    data = decode_b64(data_b64)

    count = file_out.write(data)

    if not is_silent:
        warn(f"Done! Wrote {count} bytes to {file_out.name}")


if __name__ == "__main__":
    main()
